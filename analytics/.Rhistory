library(jsonlite)
scrape <- fromJSON("airbnb-1.json")
scrape_rotterdam <- scrape[!(scrape$city!="Rotterdam"),]
set.seed(122)
# distance to center correlations
cor(sqrt((51.9225 - scrape_rotterdam$latitude)^2 + (4.47917 - scrape_rotterdam$longitude)^2),scrape_rotterdam$price)
scrape <- fromJSON("airbnb-1.json")
scrape <- fromJSON("airbnb-1.json")
scrape <- fromJSON("airbnb-scrape-1.json")
scrape_rotterdam <- scrape[!(scrape$city!="Rotterdam"),]
set.seed(122)
# distance to center correlations
cor(sqrt((51.9225 - scrape_rotterdam$latitude)^2 + (4.47917 - scrape_rotterdam$longitude)^2),scrape_rotterdam$price)
# combined metrics
bedrooms.c = scale(scrape_rotterdam$bedrooms, center = T, scale = F)
bathrooms.c = scale(scrape_rotterdam$bathrooms, center = T, scale = F)
summary(lm(price~bedrooms.c+bathrooms.c, scrape_rotterdam))
summary(lm(price~bedrooms, scrape_rotterdam))
plot(scrape_rotterdam$bedrooms, scrape_rotterdam$price)
cor(scrape_rotterdam$bedrooms, scrape_rotterdam$price)
library(jsonlite)
scrape <- fromJSON("airbnb-scrape-1.json")
scrape_rotterdam <- scrape[!(scrape$city!="Rotterdam"),]
summary(lm(price~bedrooms+bathrooms, scrape_rotterdam))
plot(bedrooms.c)
plot(scrape_rotterdam$bedrooms, scrape_rotterdam$price)
plot(bedrooms.c, scrape_rotterdam$price)
plot(scrape_rotterdam$bedrooms, scrape_rotterdam$price)
plot(bedrooms.c, scrape_rotterdam$price)
summary(lm(price~bedrooms, scrape_rotterdam))
bathrooms.c = scale(scrape_rotterdam$bathrooms, center = T, scale = F)
summary(lm(price~bathrooms, scrape_rotterdam))
summary(lm(price~bedrooms+bathrooms+beds+person_capacity, scrape_rotterdam))
summary(lm(price~bedrooms+beds+person_capacity, scrape_rotterdam))
summary(lm(price~bedrooms+bathrooms+beds+person_capacity, scrape_rotterdam))
plots(scrape_rotterdam$price ~ scrape_rotterdam$bedrooms)
plots(scrape_rotterdam$price ~ scrape_rotterdam$bedrooms)
plot(scrape_rotterdam$price ~ scrape_rotterdam$bedrooms)
lines(lowess(scrape_rotterdam$price ~ scrape_rotterdam$bedrooms))
summary(glm(price~bedrooms+bathrooms+beds+person_capacity, scrape_rotterdam))
pm <- lm(price ~ poly(bedrooms, 2, raw = TRUE), data=scrape_rotterdam)
lines(pm)
summary(pm)
summary(lm(price~bedrooms, scrape_rotterdam))
abline(pm)
lines((-1.349*((bedrooms)^2)) + (57.443*bedrooms) + 20.420)
lines((-1.349*((scrape$bedrooms)^2)) + (57.443*scrape$bedrooms) + 20.420)
plot(scrape_rotterdam$price ~ scrape_rotterdam$bedrooms)
lines(lowess(scrape_rotterdam$price ~ scrape_rotterdam$bedrooms))
pm <- lm(price ~ poly(bedrooms, 2, raw = TRUE), data=scrape_rotterdam)
lines(scrape$bedrooms, predict(pm))
lines(scrape$price, predict(pm))
lines(scrape_rotterdam$bedrooms, predict(pm))
plot(scrape_rotterdam$price ~ scrape_rotterdam$bedrooms)
lines(scrape_rotterdam$bedrooms, predict(pm))
plot(scrape_rotterdam$price ~ scrape_rotterdam$bedrooms)
pm <- lm(price ~ poly(bedrooms, 3, raw = TRUE), data=scrape_rotterdam)
lines(scrape_rotterdam$bedrooms, predict(pm))
summary(pm)
plot(scrape_rotterdam$price ~ scrape_rotterdam$bedrooms)
pm <- lm(price ~ poly(bedrooms, 100, raw = TRUE), data=scrape_rotterdam)
lines(scrape_rotterdam$bedrooms, predict(pm))
summary(pm)
pm <- lm(price ~ poly(bedrooms, 3, raw = TRUE), data=scrape_rotterdam)
lines(scrape_rotterdam$bedrooms, predict(pm))
plot(scrape_rotterdam$price ~ scrape_rotterdam$bedrooms)
pm <- lm(price ~ poly(bedrooms, 3, raw = TRUE), data=scrape_rotterdam)
lines(scrape_rotterdam$bedrooms, predict(pm))
pm <- lm(price ~ poly(bedrooms, 4, raw = TRUE), data=scrape_rotterdam)
summary(pm)
pm <- lm(price ~ poly(bedrooms, 3, raw = TRUE), data=scrape_rotterdam)
summary(lm(price ~ poly(beds, 3, raw = TRUE), data=scrape_rotterdam))
summary(lm(price~beds, scrape_rotterdam))
summary(lm(price ~ poly(beds, 2, raw = TRUE), data=scrape_rotterdam))
summary(lm(price~bathrooms, scrape_rotterdam))
summary(lm(price ~ poly(bathrooms, 2, raw = TRUE), data=scrape_rotterdam))
summary(lm(price ~ poly(bathrooms, 3, raw = TRUE), data=scrape_rotterdam))
summary(lm(price ~ poly(bathrooms, 2, raw = TRUE), data=scrape_rotterdam))
summary(lm(price~bedrooms+bathrooms+beds+person_capacity, scrape_rotterdam))
summary(lm(price~bedrooms+bathrooms+person_capacity, scrape_rotterdam))
summary(lm(price~bedrooms+bathrooms+beds, scrape_rotterdam))
summary(lm(price~bedrooms+bathrooms+person_capacity, scrape_rotterdam))
library(shiny); runApp('D:/OneDrive/Documents/edu/5. Rotterdam University of Applied Sciences/1. 2017 - 2018/Project/AirBnBStatistics/interactiveApp/v1/pricePredictor.r')
runApp('D:/OneDrive/Documents/edu/5. Rotterdam University of Applied Sciences/1. 2017 - 2018/Project/AirBnBStatistics/interactiveApp/v1/pricePredictor.r')
runApp('D:/OneDrive/Documents/edu/5. Rotterdam University of Applied Sciences/1. 2017 - 2018/Project/AirBnBStatistics/interactiveApp/v1/pricePredictor.r')
runApp('D:/OneDrive/Documents/edu/5. Rotterdam University of Applied Sciences/1. 2017 - 2018/Project/AirBnBStatistics/interactiveApp/v1/pricePredictor.r')
runApp('D:/OneDrive/Documents/edu/5. Rotterdam University of Applied Sciences/1. 2017 - 2018/Project/AirBnBStatistics/interactiveApp/v1/pricePredictor.r')
runApp('D:/OneDrive/Documents/edu/5. Rotterdam University of Applied Sciences/1. 2017 - 2018/Project/AirBnBStatistics/interactiveApp/v1/pricePredictor.r')
runApp('D:/OneDrive/Documents/edu/5. Rotterdam University of Applied Sciences/1. 2017 - 2018/Project/AirBnBStatistics/interactiveApp/v1/pricePredictor.r')
library(dplyr)
library(jsonlite)
library(rgdal)
library(rgeos)
library("sp")
r_wijk <- readOGR('POLYGON.shp', layer='POLYGON')
scrape <- fromJSON("airbnb-scrape-1.json")
scrape_rotterdam <- scrape[scrape$city=="Rotterdam",]
scrape_rotterdam_geo <- scrape_rotterdam
kwb <- read.csv("indexcijfers-wijk-rotterdam.csv", TRUE, ";")
coordinates(scrape_rotterdam_geo) <- ~ longitude + latitude
proj4string(scrape_rotterdam_geo) <- CRS("+proj=longlat")
scrape_rotterdam_geo <- spTransform(scrape_rotterdam_geo, proj4string(r_wijk))
plot(r_wijk)
points(scrape_rotterdam_geo)
tomerge <- over(scrape_rotterdam_geo, r_wijk)
scrape_rotterdam$wijknaam <- tomerge$name
bak <- scrape_rotterdam
bak[ncol(bak)] <- lapply(bak[ncol(bak)], as.character)
bak[grepl("Rotterdam", bak$wijknaam),]$wijknaam <- "Rotterdam Centrum"
bak$FI <- kwb$FI[match(unlist(bak$wijknaam), kwb$regio)]
bak$VI <- kwb$VI[match(unlist(bak$wijknaam), kwb$regio)]
bak$SI <- kwb$SI[match(unlist(bak$wijknaam), kwb$regio)]
cor(bak$FI, bak$price, use="complete.obs")
cor(bak$VI, bak$price, use="complete.obs")
cor(bak$SI, bak$price, use="complete.obs")
scrape <- fromJSON("airbnb-scrape-1.json")
scrape_rotterdam <- scrape[!(scrape$city!="Rotterdam"),]
set.seed(122)
# distance to center correlations
cor(sqrt((51.9225 - scrape_rotterdam$latitude)^2 + (4.47917 - scrape_rotterdam$longitude)^2),scrape_rotterdam$price)
# distance to center correlations
plot(sqrt((51.9225 - scrape_rotterdam$latitude)^2 + (4.47917 - scrape_rotterdam$longitude)^2),scrape_rotterdam$price)
logModel <- lm(price ~ ((dtc(latitude,longitude)/((exp(1)^dtc(latitude,longitude))-1))-ln(1-(exp(1)^-dtc(latitude,longitude)))), data=scrape_rotterdam)
logModel <- lm(price ~ ((dtc(latitude,longitude)/((exp(1)^dtc(latitude,longitude))-1))-ln(1-(exp(1)^(-dtc(latitude,longitude)))), data=scrape_rotterdam)
logModel <- lm(
price ~ ((dtc(latitude,longitude)/((exp(1)^dtc(latitude,longitude))-1))-ln(1-(exp(1)^(-dtc(latitude,longitude))))),
data=scrape_rotterdam)
logModel <- lm(
price ~ I(((dtc(latitude,longitude)/((exp(1)^dtc(latitude,longitude))-1))-ln(1-(exp(1)^(-dtc(latitude,longitude)))))),
data=scrape_rotterdam)
#########
dtc <- function(x,y) {
sqrt((51.9225 - x)^2 + (4.47917 - y)^2)
}
logModel <- lm(
price ~ I(((dtc(latitude,longitude)/((exp(1)^dtc(latitude,longitude))-1))-ln(1-(exp(1)^(-dtc(latitude,longitude)))))),
data=scrape_rotterdam)
#########
dtc <- function(x,y) {
sqrt((51.9225 - x)^2 + (4.47917 - y)^2)
}
logModel <- lm(
price ~ I(((dtc(latitude,longitude)/((exp(1)^dtc(latitude,longitude))-1))-log(1-(exp(1)^(-dtc(latitude,longitude)))))),
data=scrape_rotterdam)
plot(logModel)
summary(logModel)
dtcModel <- lm(price ~ dtc(latitude,longitude), data=scape_rotterdam)
dtcModel <- lm(price ~ dtc(latitude,longitude), data=scrape_rotterdam)
summary(dtcModel)
#########
dtc <- function(x,y) {
sqrt((51.9225 - x)^2 + (4.47917 - y)^2)
}
logModel <- lm(
price ~ I(((dtc(latitude,longitude)/((exp(1)^dtc(latitude,longitude))-1))-log(1-(exp(1)^(-dtc(latitude,longitude)))))),
data=scrape_rotterdam)
plot(sqrt((51.9225 - scrape_rotterdam$latitude)^2 + (4.47917 - scrape_rotterdam$longitude)^2),scrape_rotterdam$price)
lines(sqrt((51.9225 - scrape_rotterdam$latitude)^2 + (4.47917 - scrape_rotterdam$longitude)^2),
predict(logModel, data=scrape_rotterdam))
lines(sqrt((51.9225 - scrape_rotterdam$latitude)^2 + (4.47917 - scrape_rotterdam$longitude)^2),
predict(dtcModel, data=scrape_rotterdam), col='blue')
runApp('D:/OneDrive/Documents/edu/5. Rotterdam University of Applied Sciences/1. 2017 - 2018/Project/AirBnBStatistics/interactiveApp/v1/pricePredictor.r')
